<?php

namespace Asiel\AnimalBundle\Repository;

use AsielBundle\AnimalFactory\AnimalType;
use AsielBundle\Entity\Animal;
use AsielBundle\StatusFactory\StatusFactory;
use AsielBundle\StatusFactory\StatusType;
use Doctrine\ORM\EntityRepository;
use Ivory\CKEditorBundle\Exception\Exception;

/**
 * AnimalRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnimalRepository extends EntityRepository
{
    /**
     * Used by Search Controller.
     * @param $search array
     * @param $limit integer
     * @return mixed
     */
    public function searchAnimals($search, $limit = 10)
    {
        $em = $this->getEntityManager();

        $searchOn   = $search['searchon'];
        $status     = $search['status'];
        $query      = $search['query'];

        $animalStatus = new StatusType($status);
        $statusFactory = new StatusFactory();
        $statusProduct = $statusFactory->startFactory($animalStatus);

        if ($searchOn === 'age') {
            $qb = $this->createQueryBuilder('a');
            $qb->leftJoin('a.status', 's');
            $qb->where('s INSTANCE OF :status');
            $qb->andWhere('s.archived = false');
            $qb->setParameter('status', $em->getClassMetadata($statusProduct->getFullClassName()));
            $qb->setMaxResults($limit);

            $allAnimals = $qb->getQuery()->getResult();
            $result = [];
            foreach ($allAnimals as $animal) {
                if ($animal->getAge() == $query) {
                    $result[] = $animal;
                }
            }

            return $result;
        }

        $qb = $this->createQueryBuilder('a');
            $qb->leftJoin('a.status', 's');
            $qb->where('s INSTANCE OF :status');
            $qb->andWhere('s.archived = false');
            $qb->andWhere('a.'.$searchOn.' LIKE :query');
            $qb->setParameter('query', '%'.$query.'%');
            $qb->setParameter('status', $em->getClassMetadata($statusProduct->getFullClassName()));
            $qb->setMaxResults($limit);

            return $qb->getQuery()->getResult();
    }

    /**
     * @param $animals
     * @return bool|int
     */
    public function checkNoStatus(array $animals)
    {
        $i = 0;
        foreach ($animals as $animal) {
            if ($animal->getStatus()->isEmpty()) {
                $i++;
            }
        }

        if ($i > 0) {
            return $i;
        }

        return false;
    }

    /**
     * @param $animal Animal
     * @return null
     */
    public function getActiveState($animal)
    {
        foreach ($animal->getStatus() as $state) {
            if (!$state->isArchived()) {
                return $state;
            }
        }

        return null;
    }

    /**
     * @param $search array
     * @param $limit int
     * @return array
     * @throws Exception
     */
    public function searchAnimalsPublic($search, $limit = 10)
    {
        $type   = $search['type'];
        $gender = $search['gender'];
        $age    = $search['age'];

        /**
         *  Age
         * 'Pup/Kitten'      => '0',
         *' 1-2 years'       => '1',
         * '2 and older'     => '2',
         */

        $ageOptions = [0,1,2];
        if (!in_array($age, $ageOptions)) {
            throw new Exception('invalid age options');
        }

        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.status', 's');
        $qb->where('s.onsiteLocation = true' );
        $qb->andWhere('s.archived = false');
        $qb->andWhere('a.visiblePublic = true');
        $qb->setMaxResults($limit);

        $allOnSiteAnimals = $qb->getQuery()->getResult();
        $animalType = new AnimalType($type);

        $this->filterType($animalType, $allOnSiteAnimals);
        $this->filterGender($gender, $allOnSiteAnimals);
        $this->filterAge($age, $allOnSiteAnimals);

        return $allOnSiteAnimals;
    }

    /**
     * @param $animalType string
     * @param $allOnSiteAnimals array
     */
    private function filterType($animalType, &$allOnSiteAnimals)
    {
        $result = [];
        foreach ($allOnSiteAnimals as $animal) {
            if ($animal->getClassName() == $animalType->getValue()) {
                $result[] = $animal;
            }
        }

        $allOnSiteAnimals = $result;
    }

    /**
     * @param $gender string
     * @param $allOnSiteAnimals array
     */
    private function filterGender($gender, &$allOnSiteAnimals)
    {
        $result = [];
        foreach ($allOnSiteAnimals as $animal) {
            if ($animal->getGender() == $gender) {
                $result[] = $animal;
            }
        }

        $allOnSiteAnimals = $result;
    }

    /**
     * @param $age integer
     * @param $allOnSiteAnimals array
     */
    private function filterAge($age, &$allOnSiteAnimals)
    {
        $result = [];
        switch ($age) {
            case 0:
                foreach ($allOnSiteAnimals as $animal) {
                    if ($animal->getAge() == 0) {
                        $result[] = $animal;
                    }
                }
                break;
            case 1:
                foreach ($allOnSiteAnimals as $animal) {
                    if (($animal->getAge() === 1) || ($animal->getAge() === 2)) {
                        $result[] = $animal;
                    }
                }
                break;
            case 2:
                foreach ($allOnSiteAnimals as $animal) {
                    if ($animal->getAge() > 2) {
                        $result[] = $animal;
                    }
                }
                break;
        }

        $allOnSiteAnimals = $result;
    }

    /**
     * @param integer $animalId
     * @return array
     */
    public function findIncompleteTasks($animalId)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.tasks', 't');
        $qb->where('a.id = :id');
        $qb->andWhere('t.isComplete = false');
        $qb->setParameter('id', $animalId);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * @param int $chipNumber
     * @return array With the Id of the animal
     */
    public function findOnChipnumber(int $chipNumber)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->select('a.id');
        $qb->where('a.chipnumber = :chipnumber');
        $qb->setParameter('chipnumber', $chipNumber);
        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }
}
