<?php

namespace Asiel\AnimalBundle\Repository;

use Asiel\AnimalBundle\AnimalFactory\AnimalType;
use Asiel\AnimalBundle\Entity\Animal;
use Asiel\AnimalBundle\Entity\Status;
use Asiel\AnimalBundle\StatusFactory\StatusFactory;
use Asiel\AnimalBundle\StatusFactory\StatusType;
use Doctrine\ORM\EntityRepository;
use Ivory\CKEditorBundle\Exception\Exception;

/**
 * AnimalRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnimalRepository extends EntityRepository
{
    /**
     * Backend search
     * @param $search array
     * @param $limit integer
     * @return mixed
     */
    public function searchAnimals($search, $limit = 10)
    {
        $em = $this->getEntityManager();

        $searchOn   = $search['searchon'];
        $status     = $search['status'];
        $query      = $search['query'];

        $animalStatus = new StatusType($status);
        $statusFactory = new StatusFactory();
        $statusProduct = $statusFactory->startFactory($animalStatus);

        if ($searchOn === 'age') {
            $qb = $this->createQueryBuilder('a');
            $qb->leftJoin('a.status', 's');
            $qb->where('s INSTANCE OF :status');
            $qb->andWhere('s.archived = false');
            $qb->setParameter('status', $em->getClassMetadata($statusProduct->getFullClassName()));
            $qb->setMaxResults($limit);

            $allAnimals = $qb->getQuery()->getResult();
            $result = [];
            foreach ($allAnimals as $animal) {
                if ($animal->getAge() == $query) {
                    $result[] = $animal;
                }
            }

            return $result;
        }

        $qb = $this->createQueryBuilder('a');
            $qb->leftJoin('a.status', 's');
            $qb->where('s INSTANCE OF :status');
            $qb->andWhere('s.archived = false');
            $qb->andWhere('a.'.$searchOn.' LIKE :query');
            $qb->setParameter('query', '%'.$query.'%');
            $qb->setParameter('status', $em->getClassMetadata($statusProduct->getFullClassName()));
            $qb->setMaxResults($limit);

            return $qb->getQuery()->getResult();
    }

    /**
     * @param $animal Animal
     * @return null|Status
     */
    public function getActiveState(Animal $animal)
    {
        foreach ($animal->getStatus() as $state) {
            if (!$state->isArchived()) {
                return $state;
            }
        }

        return null;
    }

    /**
     * Used by frontend to get all animals for a search
     * @return array
     */
    public function allPublicAnimals()
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.status', 's');
        $qb->where('s.onsiteLocation = true' );
        $qb->andWhere('s.archived = false');
        $qb->andWhere('a.visiblePublic = true');

        return $qb->getQuery()->getResult();
    }

    /**
     * @param integer $animalId
     * @return array
     */
    public function findIncompleteTasks($animalId)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.tasks', 't');
        $qb->where('a.id = :id');
        $qb->andWhere('t.isComplete = false');
        $qb->setParameter('id', $animalId);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * @param int $chipNumber
     * @return array With the Id of the animal
     */
    public function findOnChipnumber(int $chipNumber)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->select('a.id');
        $qb->where('a.chipnumber = :chipnumber');
        $qb->setParameter('chipnumber', $chipNumber);
        $qb->setMaxResults(1);

        return $qb->getQuery()->getResult();
    }


    /**
     * Dashboard data
     */

    public function onsiteAnimals()
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.status', 's');
        $qb->where('s.onsiteLocation = true' );
        $qb->where('s.offsiteLocation = false' );
        $qb->andWhere('s.archived = false');

        return $qb->getQuery()->getResult();
    }

    public function offsiteAnimals()
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.status', 's');
        $qb->where('s.offsiteLocation = true' );
        $qb->where('s.onsiteLocation = false' );
        $qb->andWhere('s.archived = false');

        return $qb->getQuery()->getResult();
    }

    /**
     * End Dashboard data
     */
}
